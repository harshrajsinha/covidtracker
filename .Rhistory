processDataColMapping[1]
STATE_CODES = {}
STATE_CODES["AP"] <- 'Andhra Pradesh'
STATE_CODES["AR"] <- 'Arunachal Pradesh'
STATE_CODES["AS"] <- 'Assam'
STATE_CODES["BR"] <- 'Bihar'
STATE_CODES["CT"] <- 'Chhattisgarh'
STATE_CODES["GA"] <- 'Goa'
STATE_CODES["GJ"] <- 'Gujarat'
STATE_CODES["HR"] <- 'Haryana'
STATE_CODES["HP"] <- 'Himachal Pradesh'
STATE_CODES["JH"] <- 'Jharkhand'
STATE_CODES["KA"] <- 'Karnataka'
STATE_CODES["KL"] <- 'Kerala'
STATE_CODES["MP"] <- 'Madhya Pradesh'
STATE_CODES["MH"] <- 'Maharashtra'
STATE_CODES["MN"] <- 'Manipur'
STATE_CODES["ML"] <- 'Meghalaya'
STATE_CODES["MZ"] <- 'Mizoram'
STATE_CODES["NL"] <- 'Nagaland'
STATE_CODES["OR"] <- 'Odisha'
STATE_CODES["PB"] <- 'Punjab'
STATE_CODES["RJ"] <- 'Rajasthan'
STATE_CODES["SK"] <- 'Sikkim'
STATE_CODES["TN"] <- 'Tamil Nadu'
STATE_CODES["TG"] <- 'Telangana'
STATE_CODES["TR"] <- 'Tripura'
STATE_CODES["UT"] <- 'Uttarakhand'
STATE_CODES["UP"] <- 'Uttar Pradesh'
STATE_CODES["WB"] <- 'West Bengal'
STATE_CODES["AN"] <- 'Andaman and Nicobar Islands'
STATE_CODES["CH"] <- 'Chandigarh'
STATE_CODES["DN"] <- 'Dadra and Nagar Haveli and Daman and Diu'
STATE_CODES["DL"] <- 'Delhi'
STATE_CODES["JK"] <- 'Jammu and Kashmir'
STATE_CODES["LA"] <- 'Ladakh'
STATE_CODES["LD"] <- 'Lakshadweep'
STATE_CODES["PY"] <- 'Puducherry'
STATE_CODES["TT"] <- 'India'
}
STATE_CODES = {}
STATE_CODES["AP"] <- 'Andhra Pradesh'
STATE_CODES["AR"] <- 'Arunachal Pradesh'
STATE_CODES["AS"] <- 'Assam'
STATE_CODES["BR"] <- 'Bihar'
STATE_CODES["CT"] <- 'Chhattisgarh'
STATE_CODES["GA"] <- 'Goa'
STATE_CODES["GJ"] <- 'Gujarat'
STATE_CODES["HR"] <- 'Haryana'
STATE_CODES["HP"] <- 'Himachal Pradesh'
STATE_CODES["JH"] <- 'Jharkhand'
STATE_CODES["KA"] <- 'Karnataka'
STATE_CODES["KL"] <- 'Kerala'
STATE_CODES["MP"] <- 'Madhya Pradesh'
STATE_CODES["MH"] <- 'Maharashtra'
STATE_CODES["MN"] <- 'Manipur'
STATE_CODES["ML"] <- 'Meghalaya'
STATE_CODES["MZ"] <- 'Mizoram'
STATE_CODES["NL"] <- 'Nagaland'
STATE_CODES["OR"] <- 'Odisha'
STATE_CODES["PB"] <- 'Punjab'
STATE_CODES["RJ"] <- 'Rajasthan'
STATE_CODES["SK"] <- 'Sikkim'
STATE_CODES["TN"] <- 'Tamil Nadu'
STATE_CODES["TG"] <- 'Telangana'
STATE_CODES["TR"] <- 'Tripura'
STATE_CODES["UT"] <- 'Uttarakhand'
STATE_CODES["UP"] <- 'Uttar Pradesh'
STATE_CODES["WB"] <- 'West Bengal'
STATE_CODES["AN"] <- 'Andaman and Nicobar Islands'
STATE_CODES["CH"] <- 'Chandigarh'
STATE_CODES["DN"] <- 'Dadra and Nagar Haveli and Daman and Diu'
STATE_CODES["DL"] <- 'Delhi'
STATE_CODES["JK"] <- 'Jammu and Kashmir'
STATE_CODES["LA"] <- 'Ladakh'
STATE_CODES["LD"] <- 'Lakshadweep'
STATE_CODES["PY"] <- 'Puducherry'
STATE_CODES["TT"] <- 'India'
STATE_CODES["TT"]
View(df)
runApp()
runApp()
runApp()
View(df)
runApp()
runApp()
runApp()
maxStateDate = max(state_daily$Date)
confirmed_state_data  = state_daily %>% filter(Date == maxStateDate, status = "Confirmed")
recovered_state_data  = state_daily %>% filter(Date == maxStateDate, status = "Recovered")
deceased_state_data  = state_daily %>% filter(Date == maxStateDate, status = "Deceased")
##State wise trend
maxStateDate = max(state_daily$Date)
confirmed_state_data  = state_daily %>% filter(Date == maxStateDate, status == "Confirmed")
recovered_state_data  = state_daily %>% filter(Date == maxStateDate, status == "Recovered")
deceased_state_data  = state_daily %>% filter(Date == maxStateDate, status == "Deceased")
maxStateDate = max(state_daily$Date)
confirmed_state_data  = state_daily %>% filter(Date == maxStateDate, status == "Confirmed")
rm("status")
confirmed_state_data  = state_daily %>% filter(Date == maxStateDate, status == "Confirmed")
confirmed_state_data  = state_daily %>% filter(Date == maxStateDate, Status == "Confirmed")
state_list <- colnames(state_daily)
state_list
state_list <- state_list[, !c("Date", "Status")]
state_list <- state_list[ -("Date", "Status")]
state_list <- state_list[ -(1:2)]
state_list
maxStateDate = max(state_daily$Date)
confirmed_state_data  = state_daily %>% filter(Date == maxStateDate, Status == "Confirmed")
confirmed_state_data = confirmed_state_data[, -(1:2)]
recovered_state_data  = state_daily %>% filter(Date == maxStateDate, Status == "Recovered")
recovered_state_data = recovered_state_data[, -(1:2)]
deceased_state_data  = state_daily %>% filter(Date == maxStateDate, Status == "Deceased")
deceased_state_data = deceased_state_data[, -(1:2)]
state_list <- colnames(state_daily)
state_list <- state_list[ -(1:2)]
state_list
recovered_state_data
runApp()
confirmed_state_data[1]
confirmed_state_data[2]
typeof(confirmed_state_data)
x = confirmed_state_data
unname(x)
x
c = unname(x)
c
runApp()
maxStateDate = max(state_daily$Date)
confirmed_state_data  = state_daily %>% filter(Date == maxStateDate, Status == "Confirmed")
as.list(confirmed_state_data  )
as.list(unname(confirmed_state_data  ))
unlist(unname(confirmed_state_data  ))
runApp()
runApp()
runApp()
runApp()
runApp()
df$dailyactive <- df$dailyconfirmed - (df$dailyrecovered + df$dailydeceased)
df$dailyconfirmedprec = (df$dailyconfirmed/df$totalconfirmed)*100
df$dailyactiveprec = (df$dailyactive/df$totalactive)*100
df$dailyrecoveredprec = (df$dailyrecovered/df$totalrecovered)*100
df$dailydeathprec = (df$dailydeceased/df$totaldeceased)*100
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df)
View(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
t_state <- t(state_list)
View(t_state)
t_state <- t(state_data)
t_state <- t(state_daily)
state_max = state_daily %>% filter(Date == maxStateDate)
View(state_max)
state_max <- state_max[, -(1)]
state_max
state_max = t(state_max)
state_max
View(state_max)
colnames(state_max) <- state_max[0]
state_max
View(state_max)
state_max[0]
state_max[1,]
colnames(state_max) <- state_max[1,]
state_max
View(state_max)
state_max <- cbind(State = rownames(state_max), state_max)
View(state_max)
state_max <- state_max[(2:nrow(state_max), ]
state_max <- state_max[(2:nrow(state_max)), ]
View(state_max)
state_max = state_daily %>% filter(Date == maxStateDate)
state_max <- state_max[, -(1)]
state_max = t(state_max)
colnames(state_max) <- state_max[1,]
state_max <- cbind(State = rownames(state_max), state_max)
state_max <- state_max[(2:nrow(state_max)), ]
View(state_max)
View(state_max)
state_max$Active <- state_max$Confirmed - (state_max$Recovered + state_max$Deceased)
typeof(state_max)
View(state_max)
state_max <- as.data.frame(state_max)
state_max$Active <- state_max$Confirmed - (state_max$Recovered + state_max$Deceased)
View(state_max)
runApp()
runApp()
runApp()
runApp()
runApp()
state_max
runApp()
state_max[order(-Confirmed),]
state_max[order(-"Confirmed"),]
colnames(state_max)
typeof(mtcars)
state_max[order(-2),]
View(state_max[order(-Confirmed),])
View(state_max[order(-1),])
View(state_max[order(-state_max$Confirmed),])
runApp()
state_max = state_daily %>% filter(Date == maxStateDate)
View(state_max)
state_max <- state_max[, -(1,3)]
state_max <- state_max[, -c(1,3)]
View(state_max)
runApp()
patient_data <-  RJSONIO::fromJSON("api.covid19india.org/raw_data8.json")
patient_data <-  RJSONIO::fromJSON("https://api.covid19india.org/raw_data8.json")
nrows(patient_data )
length(patient_data$raw_data)
patient_data$raw_data
patient_data$raw_data[[1]]
patient_data1 <-  RJSONIO::fromJSON("https://api.covid19india.org/raw_data1.json")
patient_data2 <-  RJSONIO::fromJSON("https://api.covid19india.org/raw_data2.json")
patient_data3 <-  RJSONIO::fromJSON("https://api.covid19india.org/raw_data3.json")
patient_data4 <-  RJSONIO::fromJSON("https://api.covid19india.org/raw_data4.json")
patient_data5 <-  RJSONIO::fromJSON("https://api.covid19india.org/raw_data5.json")
patient_data6 <-  RJSONIO::fromJSON("https://api.covid19india.org/raw_data6.json")
patient_data7 <-  RJSONIO::fromJSON("https://api.covid19india.org/raw_data7.json")
patient_data8 <-  RJSONIO::fromJSON("https://api.covid19india.org/raw_data8.json")
length(patient_data1$raw_data)
length(patient_data2$raw_data)
length(patient_data3$raw_data)
length(patient_data4$raw_data)
length(patient_data5$raw_data)
length(patient_data6$raw_data)
length(patient_data7$raw_data)
length(patient_data8$raw_data)
patient_data8$raw_data[[1]]
patient_data8$raw_data[[2]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <-  RJSONIO::fromJSON("https://api.covid19india.org/data.json")
data_testing <- data$tested
data_testing
unlist(data_testing)
df_testing <- fromJSON(data_testing)
df_testing <- fromJSON(data["tested"])
data_testing[i]
data_testing[1]
unlist(data_testing[1])["totalpositivecases"]
data <-  RJSONIO::fromJSON("https://api.covid19india.org/data.json")
data_testing <- data$tested
df_testing <- data.frame(testpositivityrate=integer(), testedasof=as.Date(character()), testspermillion=integer(), totalindividualstested=integer(),
totalpositivecases=integer(), totalsamplestested=integer(), individualstestedperconfirmedcase=integer(), stringsAsFactors=FALSE)
for (i in 1: length(data_testing)){
z = unlist(data_testing[i])
row <- c(z["testpositivityrate"], z["testedasof"], z["testspermillion"], z["totalindividualstested"], z["totalpositivecases"], z["totalsamplestested"], z["individualstestedperconfirmedcase"])
df_testing <- rbind(df_testing, row)
names(df_testing) <- c("testpositivityrate", "testedasof", "testspermillion", "totalindividualstested", "totalpositivecases", "totalsamplestested", "individualstestedperconfirmedcase")
}
View(df_testing)
df_testing$testedasof <- as.Date(df_testing$testedasof, "%d/%m/%Y")
View(df_testing)
df_testing$testspermillion <- as.numeric(df_testing$testspermillion)
df_testing$totalsamplestested <- as.numeric(df_testing$totalsamplestested)
View(df_testing)
runApp()
hcTesting <- highchart() %>%
hc_title(text = "State Top 5") %>%
hc_chart(type = "bar") %>%
hc_xAxis(categories = df_testing$testedasof) %>%
hc_plotOptions(column = list( stacking = "normal" )) %>%
hc_add_series(
df_testing$testspermillion,
name = "Testing/Million",
color = "#db2828",
dataLabels = list(enabled = TRUE)
) %>%
hc_add_series(
df_testing$totalsamplestested,
name = "Total Sample Tested",
color = "#db2828",
dataLabels = list(enabled = TRUE)
)
hcTesting
hcTesting <- highchart() %>%
hc_title(text = "Testing") %>%
hc_chart(type = "column") %>%
hc_xAxis(categories = df_testing$testedasof) %>%
hc_plotOptions(column = list( stacking = "normal" )) %>%
hc_add_series(
df_testing$testspermillion,
name = "Testing/Million",
color = "#db2828",
dataLabels = list(enabled = TRUE)
) %>%
hc_add_series(
df_testing$totalsamplestested,
name = "Total Sample Tested",
color = "#db2828",
dataLabels = list(enabled = TRUE)
)
hcTesting
hcTesting <- highchart() %>%
hc_title(text = "Testing") %>%
hc_chart(type = "column") %>%
hc_xAxis(categories = df_testing$testedasof) %>%
hc_plotOptions(column = list( stacking = "normal" )) %>%
hc_add_series(
df_testing$testspermillion,
name = "Testing Per Million",
color = "#db2828",
dataLabels = list(enabled = TRUE)
) %>%
hc_add_series(
df_testing$totalsamplestested,
name = "Total Sample Tested",
color = "#db2828",
dataLabels = list(enabled = TRUE)
)
hcTesting
df_testing <- as.data.frame(df_testing)
data_testing <- data$tested
df_testing <- data.frame(testpositivityrate=integer(), testedasof=as.Date(character()), testspermillion=integer(), totalindividualstested=integer(),
totalpositivecases=integer(), totalsamplestested=integer(), individualstestedperconfirmedcase=integer(), stringsAsFactors=FALSE)
for (i in 1: length(data_testing)){
z = unlist(data_testing[i])
row <- c(z["testpositivityrate"], z["testedasof"], z["testspermillion"], z["totalindividualstested"], z["totalpositivecases"], z["totalsamplestested"], z["individualstestedperconfirmedcase"])
df_testing <- rbind(df_testing, row)
names(df_testing) <- c("testpositivityrate", "testedasof", "testspermillion", "totalindividualstested", "totalpositivecases", "totalsamplestested", "individualstestedperconfirmedcase")
}
df_testing <- as.data.frame(df_testing)
df_testing$testedasof <- as.Date(df_testing$testedasof, "%d/%m/%Y")
df_testing$testspermillion <- as.numeric(df_testing$testspermillion)
df_testing$totalsamplestested <- as.numeric(df_testing$totalsamplestested)
data <-  RJSONIO::fromJSON("https://api.covid19india.org/data.json")
data_testing <- data$tested
df_testing <- data.frame(testpositivityrate=integer(), testedasof=as.Date(character()), testspermillion=integer(), totalindividualstested=integer(),
totalpositivecases=integer(), totalsamplestested=integer(), individualstestedperconfirmedcase=integer(), stringsAsFactors=FALSE)
for (i in 1: length(data_testing)){
z = unlist(data_testing[i])
row <- c(z["testpositivityrate"], z["testedasof"], z["testspermillion"], z["totalindividualstested"], z["totalpositivecases"], z["totalsamplestested"], z["individualstestedperconfirmedcase"])
df_testing <- rbind(df_testing, row)
names(df_testing) <- c("testpositivityrate", "testedasof", "testspermillion", "totalindividualstested", "totalpositivecases", "totalsamplestested", "individualstestedperconfirmedcase")
}
df_testing <- as.data.frame(df_testing)
df_testing$testedasof <- as.Date(df_testing$testedasof, "%d/%m/%Y")
df_testing$testspermillion <- as.numeric(df_testing$testspermillion)
df_testing$totalsamplestested <- as.numeric(df_testing$totalsamplestested)
data <-  RJSONIO::fromJSON("https://api.covid19india.org/data.json")
data_testing <- data$tested
df_testing <- data.frame(testpositivityrate=integer(), testedasof=as.Date(character()), testspermillion=integer(), totalindividualstested=integer(),
totalpositivecases=integer(), totalsamplestested=integer(), individualstestedperconfirmedcase=integer(), stringsAsFactors=FALSE)
for (i in 1: length(data_testing)){
z = unlist(data_testing[i])
row <- c(z["testpositivityrate"], z["testedasof"], z["testspermillion"], z["totalindividualstested"], z["totalpositivecases"], z["totalsamplestested"], z["individualstestedperconfirmedcase"])
df_testing <- rbind(df_testing, row)
names(df_testing) <- c("testpositivityrate", "testedasof", "testspermillion", "totalindividualstested", "totalpositivecases", "totalsamplestested", "individualstestedperconfirmedcase")
}
df_testing <- as.data.frame(df_testing)
df_testing$testedasof <- as.Date(df_testing$testedasof, "%d/%m/%Y")
df_testing$testspermillion <- as.numeric(df_testing$testspermillion)
df_testing$totalsamplestested <- as.numeric(df_testing$totalsamplestested)
hcTesting <- highchart() %>%
hc_title(text = "Testing") %>%
hc_chart(type = "column") %>%
hc_xAxis(categories = df_testing$testedasof) %>%
hc_plotOptions(column = list( stacking = "normal" )) %>%
hc_add_series(
df_testing$testspermillion,
name = "Testing Per Million",
color = "#db2828",
dataLabels = list(enabled = TRUE)
) %>%
hc_add_series(
df_testing$totalsamplestested,
name = "Total Sample Tested",
color = "#db2828",
dataLabels = list(enabled = TRUE)
)
hcTesting
typeof(df_testing$testspermillion)
typeof(df_testing$testedasof)
typeof(df_testing$totalsamplestested)
hcTesting <- highchart() %>%
hc_title(text = "Testing") %>%
hc_chart(type = "column") %>%
hc_xAxis(categories = df_testing$testedasof) %>%
hc_plotOptions(column = list( stacking = "normal" )) %>%
hc_add_series(
df_testing$testspermillion,
name = "Testing Per Million",
color = "#db2828",
dataLabels = list(enabled = TRUE)
)
hcTesting
df_testing$totalsamplestested
df_testing$testspermillion
df_testing$testedasof
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df_testing)
data <-  RJSONIO::fromJSON("https://api.covid19india.org/data.json")
data_testing <- data$tested
df_testing <- data.frame(testpositivityrate=integer(), testedasof=as.Date(character()), testspermillion=integer(), totalindividualstested=integer(),
totalpositivecases=integer(), totalsamplestested=integer(), individualstestedperconfirmedcase=integer(), stringsAsFactors=FALSE)
data <-  RJSONIO::fromJSON("https://api.covid19india.org/data.json")
data_testing <- data$tested
df_testing <- data.frame(testpositivityrate=integer(), testedasof=as.Date(character()), testspermillion=integer(), totalindividualstested=integer(),
totalpositivecases=integer(), totalsamplestested=integer(), individualstestedperconfirmedcase=integer(), stringsAsFactors=FALSE)
for (i in 1: length(data_testing)){
z = unlist(data_testing[i])
row <- c(z["testpositivityrate"], z["testedasof"], z["testspermillion"], z["totalindividualstested"], z["totalpositivecases"], z["totalsamplestested"], z["individualstestedperconfirmedcase"])
df_testing <- rbind(df_testing, row)
names(df_testing) <- c("testpositivityrate", "testedasof", "testspermillion", "totalindividualstested", "totalpositivecases", "totalsamplestested", "individualstestedperconfirmedcase")
}
df_testing <- as.data.frame(df_testing)
View(df_testing)
View(df_testing)
df_testing$testedasof <- as.Date(df_testing$testedasof, "%d/%m/%Y")
View(df)
View(df_testing)
f_testing$testedasof <- as.Date(df_testing$testedasof, "%d/%m/%Y")
df_testing$testedasof <- as.Date(df_testing$testedasof, "%d/%m/%Y")
df_testing$testedasof <- as.Date(df_testing$testedasof, "%d/%m/%Y")
data <-  RJSONIO::fromJSON("https://api.covid19india.org/data.json")
data_testing <- data$tested
df_testing <- data.frame(testpositivityrate=integer(), testedasof=as.Date(character()), testspermillion=integer(), totalindividualstested=integer(),
totalpositivecases=integer(), totalsamplestested=integer(), individualstestedperconfirmedcase=integer(), stringsAsFactors=FALSE)
for (i in 1: length(data_testing)){
z = unlist(data_testing[i])
row <- c(z["testpositivityrate"], z["testedasof"], z["testspermillion"], z["totalindividualstested"], z["totalpositivecases"], z["totalsamplestested"], z["individualstestedperconfirmedcase"])
df_testing <- rbind(df_testing, row)
names(df_testing) <- c("testpositivityrate", "testedasof", "testspermillion", "totalindividualstested", "totalpositivecases", "totalsamplestested", "individualstestedperconfirmedcase")
}
df_testing <- as.data.frame(df_testing)
df_testing$testedasof1 <- as.Date(df_testing$testedasof, "%d/%m/%Y")
View(df_testing)
df_testing$testedasof1 <- as.Date(df_testing$testedasof1, "%Y-%m-%d")
View(df)
runApp()
typeof(df_testing$testedasof)
df_testing$testedasof
View(df_testing)
df_testing2 <- df_testing[!is.na(df_testing$testedasof),]
View(df_testing2 )
df_testing2$testedasof
runApp()
runApp()
df_testing$testedasof
data <-  RJSONIO::fromJSON("https://api.covid19india.org/data.json")
data_testing <- data$tested
df_testing <- data.frame(testpositivityrate=integer(), testedasof=as.Date(character()), testspermillion=integer(), totalindividualstested=integer(),
totalpositivecases=integer(), totalsamplestested=integer(), individualstestedperconfirmedcase=integer(), stringsAsFactors=FALSE)
for (i in 1: length(data_testing)){
z = unlist(data_testing[i])
row <- c(z["testpositivityrate"], z["testedasof"], z["testspermillion"], z["totalindividualstested"], z["totalpositivecases"], z["totalsamplestested"], z["individualstestedperconfirmedcase"])
df_testing <- rbind(df_testing, row)
names(df_testing) <- c("testpositivityrate", "testedasof", "testspermillion", "totalindividualstested", "totalpositivecases", "totalsamplestested", "individualstestedperconfirmedcase")
}
df_testing <- as.data.frame(df_testing)
df_testing <- df_testing[!is.na(df_testing$testedasof),]
df_testingFinal <- df_testing[!is.na(df_testing$testedasof),]
data <-  RJSONIO::fromJSON("https://api.covid19india.org/data.json")
data_testing <- data$tested
df_testing <- data.frame(testpositivityrate=integer(), testedasof=as.Date(character()), testspermillion=integer(), totalindividualstested=integer(),
totalpositivecases=integer(), totalsamplestested=integer(), individualstestedperconfirmedcase=integer(), stringsAsFactors=FALSE)
for (i in 1: length(data_testing)){
z = unlist(data_testing[i])
row <- c(z["testpositivityrate"], z["testedasof"], z["testspermillion"], z["totalindividualstested"], z["totalpositivecases"], z["totalsamplestested"], z["individualstestedperconfirmedcase"])
df_testing <- rbind(df_testing, row)
names(df_testing) <- c("testpositivityrate", "testedasof", "testspermillion", "totalindividualstested", "totalpositivecases", "totalsamplestested", "individualstestedperconfirmedcase")
}
# df_testing <- as.data.frame(df_testing)
df_testingFinal <- df_testing[!is.na(df_testing$testedasof),]
df_testingFinal$testedasof
df_testing <- data.frame(testpositivityrate=integer(), testedasof=as.Date(character()), testspermillion=integer(), totalindividualstested=integer(),
totalpositivecases=integer(), totalsamplestested=integer(), individualstestedperconfirmedcase=integer(), stringsAsFactors=FALSE)
for (i in 1: length(data_testing)){
z = unlist(data_testing[i])
row <- c(z["testpositivityrate"], z["testedasof"], z["testspermillion"], z["totalindividualstested"], z["totalpositivecases"], z["totalsamplestested"], z["individualstestedperconfirmedcase"])
df_testing <- rbind(df_testing, row)
names(df_testing) <- c("testpositivityrate", "testedasof", "testspermillion", "totalindividualstested", "totalpositivecases", "totalsamplestested", "individualstestedperconfirmedcase")
}
df_testing <- as.data.frame(df_testing)
df_testingFinal <- df_testing[!is.na(df_testing$testedasof),]
df_testingFinal$testedasof
df_testing$testedasof <- as.Date(df_testing$testedasof, "%d/%m/%Y")
df_testingFinal$testedasof
df_testing$testedasof
runApp()
data <-  RJSONIO::fromJSON("https://api.covid19india.org/data.json")
data$statewise
data$tested
